import jsonimport sysimport osfrom math import cos, sqrtfrom operator import itemgetterdef load_json_data(file_path):    if not file_path:        return None    elif not os.path.exists(file_path):        return None    with open(file_path, 'r') as json_file:        if not json_file.read(1):  # in case of empty file            return None        json_file.seek(0)  # Return to the start of content        return json.load(json_file)def get_biggest_bar(data):    if not data:        return None    # one liner which doesn't create list - save memory    return max([   # start of list comprehension               [bar_data.get('Name'), bar_data.get('SeatsCount')]   # create list of tuples               for bar_data in data],  # for each dict in list               key=itemgetter(1))[0]  # key says to max(): compare by second element in list of tuplesdef get_smallest_bar(data):    if not data:        return None    # one liner which doesn't create list - save memory    return min([               [(bar_data.get('Name')), (bar_data.get('SeatsCount'))]               for bar_data in data               if (bar_data.get('SeatsCount') > 4)],               key=lambda x: x[1])[0]  # min gets from second element in list of tuples and return firstdef get_closest_bar(data, latitude, longitude):    if not data:        return None    if not latitude and not longitude:        return None    return min([  # start of list comprehension                [bar_data.get('Name'),  # start of list creation ([name, distance]...)                 get_gps_distance(latitude, longitude,                 float(bar_data.get('Latitude_WGS84')), float(bar_data.get('Longitude_WGS84')))                 ]                for bar_data in data                if (bar_data.get('SeatsCount') > 4)],               key=itemgetter(1))[0]  # itemgetter more readable and faster than lambda because of C implementationdef get_commandline_arg(index):    if len(sys.argv) == index+1:        return sys.argv[index]    else:        return Nonedef get_gps_distance(latitude_a, longitude_a, latitude_b, longitude_b):    """    Calculate distance between two GPS points    (specified in decimal degrees)    Use Equirectangular approximation. Faster than haversine    Suitable for relatively small distance. Accuracy about 100 meters at 1000 km.    """    if not [latitude_a, longitude_a, latitude_b, longitude_b]:        return None    x = (longitude_b - longitude_a) * cos(0.5 * (latitude_b + latitude_a))    y = latitude_b - latitude_a    earth_radius = 6371  # in kilometers. Use 3956 for miles    return earth_radius * (sqrt(x * x + y * y))def get_user_coordinates(prompt):    try:        lat, lon = [float(x) for x in ((input(prompt)).split(','))]        return [lat, lon]    except ValueError:        print("Invalid input")        return [None, None]if __name__ == '__main__':    json_file_path = get_commandline_arg(1)    bars_data = load_json_data(json_file_path)    print('Biggest bar is: %s' % str(get_biggest_bar(bars_data)))    print('Smallest bar is: %s' % str(get_smallest_bar(bars_data)))    user_latitude, user_longitude = get_user_coordinates(        'Input GPS decimal coordinates in format Latitude, Longitude :')    print('Closest bar is: %s' % str(get_closest_bar(bars_data, user_latitude, user_longitude)))