import jsonimport sysimport osfrom math import radians, cos, sin, asin, sqrtfrom operator import itemgetterdef load_json_data(file_path):    if not file_path:        return None    if not os.path.exists(file_path):        return None    else:        with open(file_path, 'r') as json_file:            if not json_file.read(1):  #in case of empty file                return None            else:                return json.load(json_file)def get_biggest_bar(data):    if not data:        return None    # one liner which doesn't create list - save memory    return max([               [bar_data.get('Name'), bar_data.get('SeatsCount')]   # create list of tuples               for bar_data in data],  # for each element in data               key=itemgetter(1))[0]  # key says to max(): compare only second element in list of tuplesdef get_smallest_bar(data):    if not data:        return None    # one liner which doesn't create list - save memory    return min([               [(bar_data.get('Name')), (bar_data.get('SeatsCount'))]               for bar_data in data               if (bar_data.get('SeatsCount') > 4)],               key=lambda x: x[1])[0]  # min gets from second element in list of tuples and return firstdef get_closest_bar(data, latitude, longitude):    if not data:        return None    if not [latitude, longitude]:        return None    return min([  # start of list comprehension                [bar_data.get('Name'),  # start of list creation ([name, distance]...)                 get_gps_distance_fast(latitude, longitude,                 float(bar_data.get('Latitude_WGS84')), float(bar_data.get('Longitude_WGS84')))                 ]                for bar_data in data                if (bar_data.get('SeatsCount') > 4)],                   key=itemgetter(1))[0]  # itemgetter more readable and faster than lambda because of C implementationdef get_sys_arg(index):    if len(sys.argv) == index+1:        return sys.argv[index]    else:        return Nonedef get_gps_distance_fast(latitude_a, longitude_a, latitude_b, longitude_b):    """    Calculate distance between two GPS points    (specified in decimal degrees)    Use Equirectangular approximation. Faster than haversine    Suitable for relatively small distance. Accuracy about 0.1 km at 1000 km.    """    if not [latitude_a, longitude_a, latitude_b, longitude_b]:        return None    x = (longitude_b - longitude_a) * cos(0.5 * (latitude_b + latitude_a))    y = latitude_b - latitude_a    earth_radius = 6371  # in kilometers. Use 3956 for miles    return earth_radius * (sqrt(x * x + y * y))def get_gps_distance(lat1, lon1, lat2, lon2):    """    Calculate distance between two GPS points    (specified in decimal degrees)    The most accurate method (haversine)    """    if not [lat1, lon1, lat2, lon2]:        return None    # convert decimal degrees to radians    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])    # haversine formula    delta_lon = lon2 - lon1    delta_lat = lat2 - lat1    a = sin(delta_lat/2)**2 + cos(lat1) * cos(lat2) * sin(delta_lon/2)**2    c = 2 * asin(sqrt(a))    earth_radius = 6371  # Radius of earth in kilometers. Use 3956 for miles    return c * earth_radiusdef get_user_coordinates(prompt):    try:        lat, lon = [float(x) for x in ((input(prompt)).split(','))]        return [lat, lon]    except ValueError:        print("Invalid input")        return Noneif __name__ == '__main__':    file_path = get_sys_arg(1)    bars_data = load_json_data(file_path)    print('Biggest bar is: %s' % str(get_biggest_bar(bars_data)))    print('Smallest bar is: %s' % str(get_smallest_bar(bars_data)))    user_coordinates = (get_user_coordinates                                     ('Input GPS decimal coordinates in format Latitude, Longitude :'))    if user_coordinates:        user_Latitude, user_Longitude = user_coordinates        print('Closest bar is: %s' % str(get_closest_bar(bars_data, user_Latitude, user_Longitude)))    # # Now ask for coordinates input    # try:    #     gps_Latitude, gps_Longitude = map(float, (input('Input GPS decimal coordinates in format Latitude, Longitude : '))    #                                       .split(','))    #     if isinstance(gps_Latitude, float) and isinstance(gps_Longitude, float):    #         print('Closest bar is: %s' % str(get_closest_bar(json_content, gps_Latitude, gps_Longitude)))    # except ValueError:    #     print("Invalid input for coordinates!")